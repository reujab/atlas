name: atlas
version: 1.0.0
summary: Atlas
description: Atlas
confinement: strict
compression: lzo
grade: stable
base: core22

apps:
  frontend:
    daemon: simple
    restart-condition: always
    command-chain:
      - bin/wayland-launch
      - bin/dbus-launch
    command: usr/bin/wrapper
    plugs:
      - opengl
      - wayland
      - browser-support
      - hardware-observe
      - network
      - network-bind
      - process-control
      - joystick
      - audio-playback
      - alsa
      - shutdown
    environment:
      XDG_DATA_HOME: $SNAP_USER_DATA
      XDG_DATA_DIRS: $SNAP/usr/share
      GDK_GL: gles

  overlay:
    command: bin/atlas-overlay
    extensions:
      - gnome
    plugs:
      - wayland
      - process-control

# This is one of four snippets that relate to providing the userspace graphics needed by your application.
# You can treat this as "magic" so long as you don't need to make changes.
# On the Mir discourse forum there's a lot more detail on [the graphics-core20 Snap interface](https://discourse.ubuntu.com/t/the-graphics-core20-snap-interface/23000) and it's use.
plugs:
  graphics-core20:
    interface: content
    target: $SNAP/graphics
    default-provider: mesa-core20
  gnome-42-2204:
    interface: content
    target: $SNAP/gnome-platform
    default-provider: gnome-42-2204

environment:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  LD_LIBRARY_PATH: $SNAP/gnome-platform/usr/lib/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/graphics/lib:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/samba:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/pulseaudio:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/blas:$SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/lapack
  LIBGL_DRIVERS_PATH: $SNAP/graphics/dri
  LIBVA_DRIVERS_PATH: $SNAP/graphics/dri
  __EGL_VENDOR_LIBRARY_DIRS: $SNAP/graphics/glvnd/egl_vendor.d
  # Other, generally useful environment settings...
  # XDG config
  XDG_CACHE_HOME:  $SNAP_USER_COMMON/.cache
  XDG_CONFIG_HOME: $SNAP_USER_DATA/.config
  XDG_CONFIG_DIRS: $SNAP/etc/xdg
  # XKB config
  XKB_CONFIG_ROOT: $SNAP/usr/share/X11/xkb
  GTK_USE_PORTAL: 0
  SEEDBOX_HOST: http://192.168.1.129
  PKG_CONFIG_PATH: $SNAP/gnome-platform/usr/lib/pkgconfig
  PYTHONPATH: $PYTHONPATH:$SNAP/usr/lib/python3/dist-packages
  GTK_A11Y: none

parts:
  frontend:
    plugin: nil
    source: frontend
    build-environment:
      - PATH: "$PATH:$SNAPCRAFT_PART_BUILD/node_modules/.bin"
    override-build: |
      set +u # core20 base does not allow unbound variables !
      # workaround for build.snapcraft.io builds
      # https://bugs.launchpad.net/bugs/1886861
      if [ -n "$http_proxy" ]; then
        export ELECTRON_GET_USE_PROXY=1
        export GLOBAL_AGENT_HTTP_PROXY="${http_proxy}"
        export GLOBAL_AGENT_HTTPS_PROXY="${http_proxy}"
      fi

      npm i
      npm run package
      cp -a dist/frontend-linux-* $SNAPCRAFT_PART_INSTALL/frontend
      chmod a+rx $SNAPCRAFT_PART_INSTALL/frontend
    build-snaps:
      - node/16/stable
    stage-packages:
      - libnspr4
      - libnss3
      - libatk-bridge2.0-0
      - libcups2
      - libgtk-3-0
      - libasound2
      - libffi7
      - fonts-cantarell
      - fonts-noto
      - mpv
      - yt-dlp

  overlay:
    plugin: rust
    source: overlay
    build-packages:
      - cargo
      - rustc
      - pkg-config
      - libudev-dev
    stage-packages:
      - psmisc
    stage-snaps:
      - gnome-42-2204
    stage:
      - bin/atlas-overlay
      - usr/share/mime
      - usr/bin/killall

  post-build:
    plugin: nil
    after:
      - frontend
      - overlay
    override-prime: |
      ln -sf usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libva.so.2{.1400.0,}
      fc-cache -r -v

  wrapper:
    plugin: dump
    source: wrapper
    organize:
      wrapper.sh: usr/bin/wrapper

  gsettings+pixbuf:
    plugin: nil
    build-packages:
      - libgdk-pixbuf2.0-0
      - librsvg2-common
      - shared-mime-info
    override-build: |
      # Update mime database
      update-mime-database ${SNAPCRAFT_PART_INSTALL}/usr/share/mime
    stage-packages:
      - librsvg2-common
      - gsettings-desktop-schemas
      - libglib2.0-bin
    override-prime: |
      snapcraftctl prime
      # Compile the gsettings schemas
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/glib-2.0/glib-compile-schemas "$SNAPCRAFT_PRIME/usr/share/glib-2.0/schemas"
      # Index the pixbuf loaders
      LOADERS_PATH=$(echo ${SNAPCRAFT_PRIME}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/*/loaders)
      QUERY_LOADERS=/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gdk-pixbuf-2.0/gdk-pixbuf-query-loaders
      GDK_PIXBUF_MODULEDIR=${LOADERS_PATH} ${QUERY_LOADERS} > ${LOADERS_PATH}/../loaders.cache
      sed s!$SNAPCRAFT_PRIME!!g --in-place ${LOADERS_PATH}/../loaders.cache

  immodules:
    plugin: nil
    build-packages:
      - libgtk-3-0
    override-build: |
      snapcraftctl build
      mkdir -p ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/
      /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/libgtk-3-0/gtk-query-immodules-3.0 > ${SNAPCRAFT_PART_INSTALL}/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0/3.0.0/immodules.cache

  # Because Bomber won't run without a session dbus, and this isn't available to daemons on core
  # (there is no "session") we need to include a dbus session in the snap.
  # The `source: dbus` contains a script and configuration file for running `dbus-run-session`.
  dbus:
    plugin: dump
    source: dbus
    override-prime: |
      snapcraftctl prime
      # replace the SNAP_NAME placeholder with our actual project name
      sed -i "s/SNAP_NAME/$SNAPCRAFT_PROJECT_NAME/" $SNAPCRAFT_PRIME/etc/dbus-1/session.conf

  # Some utility scripts for setting up the Wayland environment
  wayland-launch:
    plugin: dump
    source: wayland-launch
    override-build: |
      # The plugs needed to run Wayland. (wayland-launch checks them, setup.sh connects them)
      # You may add further plugs here if you want these options
      PLUGS="opengl wayland graphics-core20"
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/wayland-launch
      sed --in-place "s/%PLUGS%/$PLUGS/g" $SNAPCRAFT_PART_BUILD/bin/setup.sh
      snapcraftctl build
    stage-packages:
      - inotify-tools

  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  # This ensures that your snap doesn't contain its own copy of the userspace drivers
  cleanup:
    after:
      - frontend
      - overlay
      - wrapper
      - wayland-launch
      - dbus
      - gsettings+pixbuf
      - immodules
    plugin: nil
    build-snaps: [ mesa-core20 ]
    override-prime: |
      set -eux
      cd /snap/mesa-core20/current/egl/lib
      find . -type f,l -exec rm -f $SNAPCRAFT_PRIME/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/{} \;
      rm -fr "$SNAPCRAFT_PRIME/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/dri"
      cd "$SNAPCRAFT_PRIME/usr/share/"
      rm -rf bug drirc.d glvnd libdrm lintian man
      rm -rf applications apport bash-completion dbus-1 doc-base doc gtk-doc\
             help pkgconfig libthai metainfo themes thumbnailers xml

# The `layout` ensures that files can be found by applications where they are expected by the toolkit or application.
layout:
  # This is one of four snippets that relate to providing the userspace graphics needed by your application.
  # These paths (/usr/share/libdrm and /usr/share/drirc.d) are hardcoded in mesa.
  /usr/share/libdrm:  # Needed by mesa-core20 on AMD GPUs
    bind: $SNAP/graphics/libdrm
  /usr/share/drirc.d:  # Used by mesa-core20 for app specific workarounds
    bind: $SNAP/graphics/drirc.d
  # Other, generally useful paths
  /usr/share/fonts:
    bind: $SNAP/usr/share/fonts
  /usr/share/icons:
    bind: $SNAP/usr/share/icons
  /usr/share/sounds:
    bind: $SNAP/usr/share/sounds
  /etc/fonts:
    bind: $SNAP/etc/fonts
  # GTK
  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0:
    bind: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/gdk-pixbuf-2.0
  /usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0:
    bind: $SNAP/usr/lib/${SNAPCRAFT_ARCH_TRIPLET}/gtk-3.0
  /usr/share/mime:
    bind: $SNAP/usr/share/mime
  /etc/gtk-3.0:
    bind: $SNAP/etc/gtk-3.0
  /usr/share/alsa:
    bind: $SNAP/usr/share/alsa

architectures:
  - build-on: amd64
  - build-on: armhf
  - build-on: arm64
